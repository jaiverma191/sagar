package com.hiring.postgres;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

public class Print {
	public static void main(String[] args) {

		int[] arr = { 31, 14, 13, 7, 4, 2 };
		int[][] arr2 = { { 2, 1, 0 }, { 1, 2, 0 }, { 0, 0, 0 } };
		// swap_array(arr);
		count(arr2);
		;
	}

	static void swap_array(int[] arr) {
		TreeMap<Integer, SortedSet<Integer>> map = new TreeMap<>(new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				return o1.compareTo(o2);
			}
		});
		for (int i : arr) {
			Integer count = 0;
			int temp = i;
			while (temp > 0) {
				if (temp % 2 == 1) {
					count++;
				}
				temp = temp / 2;
			}
			if (map.get(count) == null) {
				SortedSet<Integer> value = new TreeSet<>();
				value.add(i);
				map.put(count, value);
			} else {
				map.get(count).add(i);
			}
		}
		int j = arr.length - 1;
		Set<Integer> keySet = map.keySet();
		for (Integer integer : keySet) {
			SortedSet<Integer> sortedSet = map.get(integer);
			for (Integer integer2 : sortedSet) {
				arr[j--] = integer2;
			}

		}

		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}

	}

	static void count(int[][] arr) {
		Integer count = 0;
		for (int i = 0; i < arr.length; i++) {

			for (int j = 0; j < arr.length; j++) {

				if (arr[i][j] > 0) {
					if (j == 0) {
						if (i == 0) {
							count += arr[i][j];
						} else if (arr[i - 1][j] < arr[i][j] && arr[i][j - 1] < arr[i][j]) {
							count += min(arr[i][j] - arr[i - 1][j], arr[i][j] - arr[i][j - 1]);
						}
					} else if (arr[i][j - 1] < arr[i][j]) {
						if (i == 0) {
							count += arr[i][j] - arr[i - 1][j];
						} else if (arr[i - 1][j] < arr[i][j]) {
							count += min(arr[i][j] - arr[i - 1][j], arr[i][j] - arr[i][j - 1]);
						}
					}
				}
			}
		}
		System.out.println(count);
	}

	private static Integer min(int i, int j) {
		// TODO Auto-generated method stub
		if (i < j) {
			return i;
		}
		return j;
	}
}
